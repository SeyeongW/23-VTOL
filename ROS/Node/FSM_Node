#include <rclcpp/rclcpp.hpp>
#include <px4_msgs/msg/vehicle_command.hpp>
#include <px4_msgs/msg/vehicle_odometry.hpp>
#include <px4_msgs/msg/offboard_control_mode.hpp>
#include <px4_msgs/msg/trajectory_setpoint.hpp>
#include <vector>
#include <array>
#include <cmath>
#include <string>

using std::placeholders::_1;
using std::chrono::milliseconds;

class FsmNode : public rclcpp::Node {
public:
  FsmNode() : Node("fsm_node") {
    using namespace std::chrono_literals;

    vehicle_cmd_pub_ = this->create_publisher<px4_msgs::msg::VehicleCommand>("/fmu/vehicle_command/in", 10);
    traj_pub_ = this->create_publisher<px4_msgs::msg::TrajectorySetpoint>("/fmu/trajectory_setpoint/in", 10);
    offboard_mode_pub_ = this->create_publisher<px4_msgs::msg::OffboardControlMode>("/fmu/offboard_control_mode/in", 10);

    odom_sub_ = this->create_subscription<px4_msgs::msg::VehicleOdometry>(
      "/fmu/vehicle_odometry/out", 10, std::bind(&FsmNode::odomCallback, this, _1));

    timer_ = this->create_wall_timer(200ms, std::bind(&FsmNode::runFsm, this));

    // Waypoints defined as {x, y, z}
    waypoints_ = {
      {10.0f, 0.0f, -5.0f},
      {20.0f, 10.0f, -6.0f},
      {30.0f, 15.0f, -5.0f},
      {35.0f, 5.0f, -4.5f}
    };
  }

private:
  std::string state_ = "IDLE";
  float x_ = 0.0, y_ = 0.0, z_ = 0.0;
  size_t current_wp_idx_ = 0;
  bool transitioned_ = false;
  int last_printed_wp_ = -1;

  std::vector<std::array<float, 3>> waypoints_;

  rclcpp::Publisher<px4_msgs::msg::VehicleCommand>::SharedPtr vehicle_cmd_pub_;
  rclcpp::Publisher<px4_msgs::msg::TrajectorySetpoint>::SharedPtr traj_pub_;
  rclcpp::Publisher<px4_msgs::msg::OffboardControlMode>::SharedPtr offboard_mode_pub_;
  rclcpp::Subscription<px4_msgs::msg::VehicleOdometry>::SharedPtr odom_sub_;
  rclcpp::TimerBase::SharedPtr timer_;

  void odomCallback(const px4_msgs::msg::VehicleOdometry::SharedPtr msg) {
    x_ = msg->position[0];
    y_ = msg->position[1];
    z_ = msg->position[2];
  }

  void runFsm() {
    publishOffboardMode();

    if (state_ == "IDLE") {
      RCLCPP_INFO(this->get_logger(), "State: IDLE → TAKEOFF (arming)");
      arm();
      state_ = "TAKEOFF";

    } else if (state_ == "TAKEOFF") {
      publishSetpoint(0.0f, 0.0f, -5.0f);
      if (z_ < -4.8f) {
        RCLCPP_INFO(this->get_logger(), "State: TAKEOFF → NAV");
        state_ = "NAV";
      }

    } else if (state_ == "NAV") {
      if (current_wp_idx_ < waypoints_.size()) {
        float tx = waypoints_[current_wp_idx_][0];
        float ty = waypoints_[current_wp_idx_][1];
        float tz = waypoints_[current_wp_idx_][2];

        // Display current target waypoint info
        if ((int)current_wp_idx_ != last_printed_wp_) {
          RCLCPP_INFO(this->get_logger(), "Moving to WP_%zu: [%.1f, %.1f, %.1f]", current_wp_idx_, tx, ty, tz);
          last_printed_wp_ = (int)current_wp_idx_;
        }

        publishSetpoint(tx, ty, tz);

        if (distanceTo(tx, ty) < 1.0f) {
          RCLCPP_INFO(this->get_logger(), "Reached WP_%zu", current_wp_idx_);

          if (current_wp_idx_ == 1 && !transitioned_) {
            transitionToFw();
            transitioned_ = true;
            RCLCPP_INFO(this->get_logger(), "→ Performed VTOL Transition at WP1");
          }

          current_wp_idx_++;
        }
      } else {
        RCLCPP_INFO(this->get_logger(), "Mission complete: all waypoints reached.");
      }
    }
  }

  float distanceTo(float tx, float ty) {
    return std::hypot(tx - x_, ty - y_);
  }

  void arm() {
    px4_msgs::msg::VehicleCommand msg{};
    msg.timestamp = this->now().nanoseconds() / 1000;
    msg.param1 = 1.0;
    msg.command = px4_msgs::msg::VehicleCommand::VEHICLE_CMD_COMPONENT_ARM_DISARM;
    msg.target_system = 1;
    msg.target_component = 1;
    msg.source_system = 1;
    msg.source_component = 1;
    msg.from_external = true;
    vehicle_cmd_pub_->publish(msg);
  }

  void transitionToFw() {
    px4_msgs::msg::VehicleCommand msg{};
    msg.timestamp = this->now().nanoseconds() / 1000;
    msg.param1 = 4.0f; // Transition to Fixed-Wing
    msg.command = px4_msgs::msg::VehicleCommand::VEHICLE_CMD_DO_VTOL_TRANSITION;
    msg.target_system = 1;
    msg.target_component = 1;
    msg.source_system = 1;
    msg.source_component = 1;
    msg.from_external = true;
    vehicle_cmd_pub_->publish(msg);
  }

  void publishSetpoint(float x, float y, float z) {
    px4_msgs::msg::TrajectorySetpoint msg{};
    msg.timestamp = this->now().nanoseconds() / 1000;
    msg.position[0] = x;
    msg.position[1] = y;
    msg.position[2] = z;
    traj_pub_->publish(msg);
  }

  void publishOffboardMode() {
    px4_msgs::msg::OffboardControlMode msg{};
    msg.timestamp = this->now().nanoseconds() / 1000;
    msg.position = true;
    offboard_mode_pub_->publish(msg);
  }
};

int main(int argc, char *argv[]) {
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<FsmNode>());
  rclcpp::shutdown();
  return 0;
}
